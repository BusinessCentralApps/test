name: Dir

on:
  workflow_dispatch:

defaults:
  run:
    shell: PowerShell

jobs:
  update:
    runs-on: windows-latest

    steps:
      - name: GCI
        run: |
          Set-location "c:\"
          Get-ChildItem
          Add-Content -Path $env:GITHUB_ENV -Value "TESTENV=FREDDY"

      - name: GCI2
        run: |
          Write-Host "ENVVAR $ENV:TESTENV"

      - name: Get-InstalledModule
        run: |
          Get-InstalledModule

      - name: Get-Module
        run: |
          Get-Module

      - name: Get-Module-ListAvailable
        run: |
          (Get-Module -Name 'AzureRM.KeyVault' -listAvailable).ExportedCommands
          Write-Host "-------"
          (Get-Module -Name 'AzureRM.Profile' -listAvailable).ExportedCommands

      - name: ReadFromKeyVault
        run: |
          $azureCredentials = '${{ Secrets.Azure_Credentials }}' | ConvertFrom-Json
          $azureCredentials.KeyVaultName
          Write-Host "a"
          Get-Module -Name 'AzureRM.KeyVault' -listAvailable | Import-Module -WarningAction SilentlyContinue
          Write-Host "b"
          Get-Module -Name 'AzureRM.Profile' -listAvailable | Import-Module -WarningAction SilentlyContinue
          Write-Host "c"
          $credential = New-Object PSCredential -argumentList $azureCredentials.clientId, (ConvertTo-SecureString $azureCredentials.clientSecret -AsPlainText -Force)
          Write-Host "d"
          "N" | Add-AzureRmAccount -ServicePrincipal -Tenant $azureCredentials.tenantId -Credential $credential -WarningAction SilentlyContinue | Out-Null
          Write-Host "e"
          Set-AzureRmContext -SubscriptionId $azureCredentials.subscriptionId -Tenant $azureCredentials.tenantId -WarningAction SilentlyContinue | Out-Null
          Write-Host "f"
          $keyVaultSecret = Get-AzureKeyVaultSecret -VaultName $azureCredentials.keyVaultName -Name 'Password'
          Write-Host "g"
          if ($keyVaultSecret) {
            $value = [Runtime.InteropServices.Marshal]::PtrToStringBSTR(([Runtime.InteropServices.Marshal]::SecureStringToBSTR($keyVaultSecret.SecretValue)))
            Write-Host "The password is $value"
          }
          else {
            Write-Host "No password secret available"
          }
         
